@{
    ViewData["Title"] = "Coordinador Productos";
}
<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Nunito:ital,wght@0,200..1000;1,200..1000&display=swap" rel="stylesheet">
<link rel="stylesheet" href="~/css/JefeConteo.css">

<style>
        * {
            font-family: "Nunito", serif;
        }

    .table-responsive{
        overflow-x: unset;
    } 
    .justify-content-center{
        width: 100vw !important;
    
    
    
    }
    
</style>
<div class="container">
    <h1>Productos del Plan <span id="plan-id" style="font-size:35px"></span></h1>

    <div class="mt-3 d-flex justify-content-between w-100">
        <div class="form-group">
            <button class="btn btn-danger" id="finalizarBtn" hidden>Enviar a cargada</button>
        </div>
    </div>


                    <div class="table-responsive">
                        <table class="table text-center">
                            <thead>
                                <tr>
                                    <th>Fabricante</th>
                                    <th>ID</th>
                                    <th>Producto</th>
                                    <th>Medida base</th>
                                    <th>Cantidad</th>
                                    <th>Pickado</th>
                                    <th>Pendiente</th>
                                    <th>Estado</th>
                                    <th></th>
                                </tr>
                            </thead>
                            <tbody id="productos-body">
                                <tr>
                                    <td colspan="4">Cargando productos...</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>

<div class="modal fade" id="pedidosModal" tabindex="-1" role="dialog" aria-labelledby="pedidosModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="pedidosModalLabel">Detalles de Pedidos</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <h6 id="producto-descripcion"></h6>
                <div class="table-responsive">
                    <table class="table">
                        <thead>
                            <tr>
                                <th>Número Pedido</th>
                                <th>Cantidad Solicitada</th>
                                <th>Factor</th>
                                <th>Paquetes</th>
                                <th>Cantidad a Cargar</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody id="pedidos-body">
                            <tr>
                                <td colspan="3">Cargando pedidos...</td>
                            </tr>
                        </tbody>
                    </table>
                    <button class="btn btn-primary" id="guardar-cantidad-btn">Guardar</button>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="modal fade" id="informacionPedidoModal" tabindex="-1" role="dialog" aria-labelledby="informacionPedidoModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="informacionPedidoModalLabel">Información del Pedido</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <table class="table">
                    <thead>
                        <tr>
                            <th>IDProducto</th>
                            <th>Descripcion</th>
                            <th>Medida Base</th>
                            <th>Ubicacion </th>
                            <th>Cantidad</th>
                        </tr>
                    </thead>
                    <tbody id="informacion-pedido-body">
                        <tr>
                            <td colspan="2">Cargando información del pedido...</td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(() => {
            const urlParams = new URLSearchParams(window.location.search);
            const idPlan = urlParams.get('id');
            $('#plan-id').text(idPlan);
            cargarProductos(idPlan);

            $('#finalizarBtn').click(() => {
                // Swal.fire({
                //     title: '¿Estás seguro?',
                //     text: "¿Quieres finalizar?",
                //     icon: 'warning',
                //     showCancelButton: true,
                //     confirmButtonColor: '#3085d6',
                //     cancelButtonColor: '#d33',
                //     confirmButtonText: 'Sí, finalizar!'
                // }).then((result) => {
                //     if (result.isConfirmed) {
                        finalizarCargadaPlaca(idPlan);
                //     }
                // });
            });
        });

        const finalizarCargadaPlaca = async (idPlan) => {
            try {
                const response = await fetch(`/Coordinador/FinalizarCargadaPlaca?idPlan=${idPlan}`, {
                    method: 'POST'
                });

                if (response.ok) {
                    Swal.fire('Éxito', 'Enviado exitosamente.', 'success').then(() => {
                        window.history.back();
                    });
                } else {
                    throw new Error('Error al finalizar el envio.');
                }
            } catch (error) {
                console.error('Error al finalizar el envio:', error);
                Swal.fire('Error', 'Error al finalizar el envio.', 'error');
            }
        };

        const cargarProductos = async (idPlan) => {
            try {
                const response = await fetch(`/Coordinador/ObtenerProductoPlan?ID=${idPlan}`);
                const data = await response.json();
                console.log("producto.pickado", data);
                const $productosBody = $('#productos-body')
                let resultadoFinal = 1;
                $productosBody.empty();
                let enviaracarga = 0;
                data.forEach(producto => {
                    if (producto.asignado === producto.pickado) {
                        producto.revisado = 1;
                    }
                    resultadoFinal *= producto.revisado;
                    const estadotabla = producto.asignado - producto.pickado === 0 ? '' : 'danger';
                    const estado = (producto.asignado === producto.pickado || producto.revisado === 1) ? 'Completo' : 'Incompleto';
                    const alertaubi = producto.nuevaUbicacion === null ? '' : 'Este producto tiene nueva ubicacion: ' +producto.nuevaUbicacion;
                    const btnreconteo = producto.asignado === producto.pickado ? '' : (producto.reconteo === 1 ? (producto.finalizado === 1? '': '<br><br><button class="btn btn-warning">Siendo Recontado</button>'): (producto.revisado === 1 ? '': `<br><br><button class="btn btn-danger enviar-reconteo-btn" data-id-plan="${idPlan}" data-id-producto="${producto.idProducto}" hidden>Reconteo</button>`));
                    const hiddencom = estado === 'Completo' ? 'hidden':'';
                    if(hiddencom !== 'hidden'){
                        enviaracarga = 1;
                    }
                    const estadoButton = estado === 'Incompleto'
                        ? `<button class="btn btn-warning ver-pedidos-btn" data-id-plan="${idPlan}" data-id-producto="${producto.idProducto}" data-total-cantidad="${producto.asignado}" data-pickado="${producto.pickado}">${estado}</button>${btnreconteo}`
                        : `<button class="btn btn-success ver-pedidos-btn" data-id-plan="${idPlan}" data-id-producto="${producto.idProducto}" data-total-cantidad="${producto.asignado}" data-pickado="${producto.pickado}">Completo</button>${btnreconteo}`;

                    $productosBody.append(`
                                <tr ${hiddencom}>
                                    <td>${producto.fabricante}</td>
                                    <td>${producto.idProducto}</td>
                                    <td>${producto.descripcion}</td>
                                    <td>${producto.medidaBase}</td>
                                    <td>${producto.asignado}</td>
                                    <td>${producto.pickado}</td>
                                            <td class="table table-${estadotabla}" style="width: 100px;">${producto.asignado - producto.pickado}</td>
                                    <td>${estadoButton}</td>
                                    <td>${alertaubi}</td>
                                </tr>
                            `);
                });
                if (resultadoFinal === 0) {
                    $('#finalizarBtn').attr('hidden', true);
                } else {
                    $('#finalizarBtn').removeAttr('hidden');
                }

                if(enviaracarga === 0){
                    $('#finalizarBtn').click();
                }

                $('.ver-pedidos-btn').click(function () {
                    const idProducto = $(this).data('id-producto');
                    const idPlan = $(this).data('id-plan');
                    const totalCantidad = $(this).data('total-cantidad');
                    const pickado = $(this).data('pickado');
                    cargarPedidosProducto(idPlan, idProducto, totalCantidad, pickado);
                    $('#pedidosModal').modal('show');
                });

                $('.enviar-reconteo-btn').click(async function () {
                    const idProducto = $(this).data('id-producto');
                    const idPlan = $(this).data('id-plan');

                    const result = await Swal.fire({
                        title: '¿Estás seguro?',
                        text: "¿Deseas enviar este producto a reconteo?",
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonText: 'Sí, enviar a reconteo',
                        cancelButtonText: 'No, cancelar',
                    });

                    if (result.isConfirmed) {
                        try {
                            const response = await fetch(`/Coordinador/ReconteoProducto?idPlan=${idPlan}&idProducto=${idProducto}`, {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json',
                                }
                            });

                            const result = await response.json();
                            if (result.success) {
                                Swal.fire('Éxito', result.message, 'success');
                                cargarProductos(idPlan);
                            } else {
                                Swal.fire('Error', result.message, 'error');
                            }
                        } catch (error) {
                            console.error('Error al enviar reconteo:', error);
                            Swal.fire('Error', 'Error al enviar reconteo.', 'error');
                        }
                    } else {
                        console.log('Reconteo cancelado');
                    }
                });

            } catch (error) {
                console.error('Error al cargar los productos:', error);
                Swal.fire('Error', 'Error al cargar los productos.', 'error');
                $('#productos-body').html('<tr><td colspan="4">Error al cargar los productos.</td></tr>');
            }
        };

        const cargarPedidosProducto = async (idPlan, idProducto, totalCantidad, pickado) => {
            try {
                const response = await fetch(`/Coordinador/ObtenerPedidosProducto?IDPlan=${idPlan}&IDProducto=${idProducto}`);
                const data = await response.json();
                console.log("Pedido", data);

                const $pedidosBody = $('#pedidos-body');
                $pedidosBody.empty();
                               
                let cantidadRestante = pickado;
                let totalCantidadIngresada = 0;
                let cantiPropia = 0;

                data.forEach((pedido) => {
                    console.log("pedido",pedido);
                    const cantidadSolicitada = pedido.cantidad;
                    let cantidadAEntregar = 0;
                    const paqueteri = pedido.factor === 1 ? 'UND' : pedido.cantidadBase;

                    if (cantidadRestante >= cantidadSolicitada) {
                        cantidadAEntregar = Math.floor(cantidadSolicitada / pedido.factor);
                        cantidadRestante -= cantidadAEntregar * pedido.factor;
                    } else {
                        cantidadAEntregar = Math.floor(cantidadRestante / pedido.factor);
                        cantidadRestante -= cantidadAEntregar * pedido.factor;
                    }

                    const cantidadcar = pedido.cantidadCargar === 0 ? cantidadAEntregar : pedido.cantidadCargar;
                    totalCantidadIngresada += cantidadcar * pedido.factor;
                    $pedidosBody.append(`
                        <tr data-id-plan-ped="${pedido.idPlanPed}" data-factor="${pedido.factor}">
                            <td>${pedido.numeroGuia}</td>
                            <td>${cantidadSolicitada}</td>
                            <td>${pedido.factor}</td>
                            <td>${paqueteri}</td>
                            <td>
                                <input type="number" value="${cantidadcar}" class="form-control cantidad-input"
                                       min="0" max="${pedido.cantidadBase}"
                                       data-factor="${pedido.factor}" data-id-plan-ped="${pedido.idPlanPed}"
                                       data-cantidad-base="${pedido.cantidadBase}" data-can="${cantidadSolicitada}"/>
                            </td>
                            <td>
                                <button class="btn btn-info ver-info-btn" data-numero-guia="${pedido.numeroGuia}">
                                    <i class="bx bx-search"></i>
                                </button>
                            </td>
                        </tr>
                    `);
                });


                $('#producto-descripcion').text(data[0]?.descripcion || "");



                $('#guardar-cantidad-btn').hide();
                console.log("pickado, totalCantidadIngresada", pickado, totalCantidadIngresada);

                if (pickado - totalCantidadIngresada === 0){
                    $('#guardar-cantidad-btn').show();
                }



                $('#guardar-cantidad-btn').off('click').on('click', () => {
                    guardarCantidadPedido(data);
                });

                $('.ver-info-btn').click(function () {
                    const numeroGuia = $(this).data('numero-guia');
                    cargarInformacionPedido(numeroGuia);
                    $('#informacionPedidoModal').modal('show');
                });

                $('.cantidad-input').on('input', function () {
                    const inputValue = parseInt($(this).val(), 10) || 0;
                    const factor = parseInt($(this).data('factor'), 10);
                    const cantidadBase = parseInt($(this).data('cantidad-base'), 10);
                    const idPlanPed = $(this).data('id-plan-ped');
                    const canSoli = $(this).data('can');

                    totalCantidadIngresada = 0;
                    cantipropia = 0;

                    $('.cantidad-input').each(function () {
                        const inputValue = parseInt($(this).val(), 10) || 0;
                        const factor = parseInt($(this).data('factor'), 10);
                        cantipropia = inputValue * factor;
                        totalCantidadIngresada += inputValue * factor; 
                    });

                    $('#totalCantidadIngresada').text(`${totalCantidadIngresada}`);
                    $('#diferencan').text(`${pickado - totalCantidadIngresada}`);
                    const diferencia = pickado - totalCantidadIngresada;
                    if (diferencia === 0) {
                        $('#guardar-cantidad-btn').show();
                    } else {
                        $('#guardar-cantidad-btn').hide();
                    }

                    if (cantipropia > canSoli) {
                        //totalCantidadIngresada > pickado ||
                        Swal.fire({
                            icon: 'error',
                            title: 'Total excedido',
                            text: `El total de las cantidades ingresadas no puede superar el requerido del pedido.`
                        });

                        //$(this).val(0);
                        // totalCantidadIngresada -= inputValue * factor;

                        $('#guardar-cantidad-btn').hide();
                    }

                   
                });

                $pedidosBody.append(`
                    <tr>
                        <td colspan="5" class="text-right"><strong>Total A Contar:</strong></td>
                        <td id="totalaContar">${pickado}</td>
                    </tr>
                    <tr>
                        <td colspan="5" class="text-right"><strong>Total Pickado:</strong></td>
                        <td id="totalCantidadIngresada">${totalCantidadIngresada}</td>
                    </tr>
                    <tr>
                        <td colspan="5" class="text-right"><strong>Pendiente:</strong></td>
                        <td id="diferencan">${pickado-totalCantidadIngresada}</td>
                    </tr>
                `);

            } catch (error) {
                console.error('Error al cargar los pedidos:', error);
                Swal.fire('Error', 'Error al cargar los pedidos.', 'error');
                $('#pedidos-body').html('<tr><td colspan="3">Error al cargar los pedidos.</td></tr>');
            }
        };


        const cargarInformacionPedido = async (numeroGuia) => {
            try {
                const response = await fetch(`/Coordinador/ObtenerInformacionPedido?numeroGuia=${numeroGuia}`);
                const data = await response.json();

                const $informacionBody = $('#informacion-pedido-body');
                $informacionBody.empty();

                if (data.length === 0) {
                    $informacionBody.append('<tr><td colspan="2">No se encontraron detalles para este pedido.</td></tr>');
                    return;
                }

                data.forEach(item => {
                    $informacionBody.append(`
                                <tr>
                                    <td>${item.idProducto}</td>
                                    <td>${item.descripcion}</td>
                                    <td>${item.medidaBase}</td>
                                    <td>${item.ubicacion}</td>
                                    <td>${item.cantidad}</td>
                                </tr>
                            `);
                });

            } catch (error) {
                console.error('Error al cargar la información del pedido:', error);
                Swal.fire('Error', 'Error al cargar la información del pedido.', 'error');
                $('#informacion-pedido-body').html('<tr><td colspan="2">Error al cargar la información del pedido.</td></tr>');
            }
        };

        const guardarCantidadPedido = async () => {
            const updates = [];

            $('#pedidos-body tr').each(function () {
                const cantidadInput = $(this).find('input').val();
                const idPlanPed = $(this).data('id-plan-ped');
                const factor = $(this).data('factor');
                console.log("cantidadInput", cantidadInput);
                console.log("factor", factor);
                console.log("idPlanPed", idPlanPed);
                const urlParams = new URLSearchParams(window.location.search);
                const IdPlanTransferencia = urlParams.get('id');
                console.log("ID de la URL:", IdPlanTransferencia);
                if (idPlanPed && cantidadInput) {
                    updates.push({
                        idPlanPed: String(idPlanPed),
                        cantidadCargar: String(cantidadInput*factor),
                        IdPlanTransferencia: String(IdPlanTransferencia)
                    });
                }
            });
            console.log
            if (updates.length === 0) {
                Swal.fire('Advertencia', 'No hay datos para guardar.', 'warning');
                return;
            }

            try {
                const response = await fetch('/Coordinador/GuardarCantidadPedido', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(updates)
                });

                if (response.ok) {
                    Swal.fire('Éxito', 'Cantidades guardadas con éxito.', 'success').then(() => {
                        $('#pedidosModal').modal('hide');
                        window.location.reload();
                        
                    });
                } else {
                    const errorResponse = await response.json();
                    throw new Error(errorResponse.message || 'Error al guardar las cantidades.');
                }
            } catch (error) {
                console.error('Error al guardar las cantidades:', error);
                Swal.fire('Error', 'Ocurrió un error al guardar las cantidades.', 'error');
            }
        };
    </script>
}
